//
// --------------------------------------------------
//	Adjust width and padding for <IE8, since
//	we're using box-sizing: border-box
// --------------------------------------------------
//

@mixin box-model($width, $padTop, $padRight, $padBottom, $padLeft) {
	width: $width;
	@if($padRight == $padLeft and $padTop == $padBottom) {
	  padding: $padTop $padRight;
	}
	@else {
	  padding: $padTop $padRight $padBottom $padLeft;
	}
	.lt-ie8 & {
	  width: $width - $padRight - $padLeft;
	}
}


//
// -------------------------------------------
//  Image replacement
// -------------------------------------------
//

@mixin ir($height, $width, $image) {
  height: $height;
  width: $width;
  overflow: hidden;
  margin: 0;
  padding: 0;
  &:before {
    content: url($image);
    display: inline-block;
    font-size: 0;
    line-height: 0;
  }
}


//
//---------------------------------------------------
//	rem, with px fallback for < IE9
//---------------------------------------------------
//

@mixin remfb($properties, $sizes) {
  $rems: ();
  $pxs: ();
  
  @for $i from 1 through length($sizes) {
    $size: parseInt(nth($sizes, $i));
    $unit: unit(nth($sizes, $i));

    @if($size == 0) {
      $pxs: join($pxs, 0);
      $rems: join($rems, 0);
    }
    @else {
      @if($unit == 'rem') {
        $pxs: join($pxs, #{$size*parseInt($main-font-size)}px);
        $rems: join($rems, #{$size}rem);
      }
      @else {
        $pxs: join($pxs, #{$size}px);
        $rems: join($rems, #{$size/parseInt($main-font-size)}rem);
      }
    }
  }

  @for $j from 1 through length($properties) {
    #{nth($properties, $j)}: $pxs;
    #{nth($properties, $j)}: $rems;
  }
}


//
//---------------------------------------------------
//  Media queries
//---------------------------------------------------
//

@mixin bp($min, $max: NULL) {
  @if unit($min) != 'em' {
    $min: convertUnit($min, pt);
  }
  @if($max != NULL) {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  }
  @else {
    @media (min-width: $min) {
      @content;
    }
  }
}


//
//---------------------------------------------------
//  Make element as big as its container
//---------------------------------------------------
//

@mixin coverContainer {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

//
//---------------------------------------------------
//  Center element vertically and horizontally
//---------------------------------------------------
//

@mixin centerElement {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

//
//---------------------------------------------------
//  Word-wrap
//---------------------------------------------------
//

@mixin word-wrap() {
  word-break:     break-word;
  -webkit-hyphens: auto;
  -moz-hyphens:    auto;
  hyphens:         auto;
}

//
//---------------------------------------------------
//  Add ellipsis (...) to overflowing text
//---------------------------------------------------
//

@mixin ellipsis() {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}