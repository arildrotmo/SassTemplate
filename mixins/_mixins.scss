//
// --------------------------------------------------
//	Adjust width and padding for <IE8, since
//	we're using box-sizing: border-box
// --------------------------------------------------
//

@mixin box-model($width, $padTop, $padRight, $padBottom, $padLeft) {
	width: $width;
	@if($padRight == $padLeft and $padTop == $padBottom) {
	  padding: $padTop $padRight;
	}
	@else {
	  padding: $padTop $padRight $padBottom $padLeft;
	}
	.lt-ie8 & {
	  width: $width - $padRight - $padLeft;
	}
}



//
//--------------------------------------------------
//	nth-child support for < IE9
//	Usage example : li#{nth-child(5)} {color: red;}
//--------------------------------------------------
//

@function nth-child($n) {
  $nth-child: first-child;
  @for $i from 2 through $n {
    $nth-child: append($nth-child, #{"+ *"});
  }
  @return #{":"}$nth-child;
}



//
//---------------------------------------------------
//	Strip the unit from a number
//---------------------------------------------------
//

@function parseInt($value) {

    @return $value / ($value * 0 + 1);
}



//
//---------------------------------------------------
//	rem, with px fallback for < IE9
//---------------------------------------------------
//

@mixin remfb($property, $sizes) {
  $rems: ();
  $pxs: ();
  
  @for $i from 1 through length($sizes) {
    $size: parseInt(nth($sizes, $i));
    $unit: unit(nth($sizes, $i));
    
    @if($unit == 'rem') {
      $pxs: join($pxs, #{$size*parseInt($main-font-size)}px);
      $rems: join($rems, #{$size}rem);
      #{$property}: $pxs;
      #{$property}: $rems;
    }
    @else {
      @if($unit != 'px') {
        @warn "Assuming #{$property} to be in pixels";
      }
      $pxs: join($pxs, #{$size}px);
      $rems: join($rems, #{$size/parseInt($main-font-size)}rem);
      #{$property}: $pxs;
      #{$property}: $rems;
    }
  }
}