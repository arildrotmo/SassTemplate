//
// --------------------------------------------------
//	Adjust width and padding for <IE8, since
//	we're using box-sizing: border-box
// --------------------------------------------------
//

@mixin box-model($width, $padTop, $padRight, $padBottom, $padLeft) {
	width: $width;
	@if($padRight == $padLeft and $padTop == $padBottom) {
	  padding: $padTop $padRight;
	}
	@else {
	  padding: $padTop $padRight $padBottom $padLeft;
	}
	.lt-ie8 & {
	  width: $width - $padRight - $padLeft;
	}
}

//
// -------------------------------------------
//  Image replacement
// -------------------------------------------
//
@mixin ir($height, $width, $image) {
  height: $height;
  width: $width;
  overflow: hidden;
  margin: 0;
  padding: 0;
  &:before {
    content: url($image);
    display: inline-block;
    font-size: 0;
    line-height: 0;
  }
}


//
//--------------------------------------------------
//	nth-child support for < IE9
//	Usage example : li#{nth-child(5)} {color: red;}
//--------------------------------------------------
//

@function nth-child($n) {
  $nth-child: first-child;
  @for $i from 2 through $n {
    $nth-child: append($nth-child, #{"+ *"});
  }
  @return #{":"}$nth-child;
}



//
//---------------------------------------------------
//	Strip the unit from a number
//---------------------------------------------------
//

@function parseInt($value) {

    @return $value / ($value * 0 + 1);
}



//
//---------------------------------------------------
//  Convert unit
//---------------------------------------------------
//

@function convertUnit($from, $to) {
  $fromValue: parseInt($from);
  $fromUnit: unit($from);
  
  // Convert to px first :
  $px: 1;
  @if($fromUnit != px) {
    @if($fromUnit == rem or $fromUnit == em) {
      $px: $fromValue * parseInt($main-font-size);
    }
    @else if($fromUnit == in) {
      $px: $fromValue * 96;
    }
    @else if($fromUnit == cm) {
      $px: $fromValue * 37.8;
    }
    @else if($fromUnit == mm) {
      $px: $fromValue * 3.78;
    }
    @else if($fromUnit == pt) {
      $px: $fromValue * 96 / 72;
    }
    @else if($fromUnit == pc) {
      $px: $fromValue * 96 / 72 * 12;
    }
  }
  @else {
    $px: $fromValue;
  }

  // Convert from px to desired unit :
  @if($to == rem or $to == em) {
    @return $px / parseInt($main-font-size)+$to;
  }
  @else if($to == in) {
    @return $px / 96+in;
  }
  @else if($to == cm) {
    @return $px / 37.8+cm;
  }
  @else if($to == mm) {
    @return $px / 3.78+mm;
  }
  @else if($to == pt) {
    @return $px / 96 * 72+pt;
  }
  @else if($to == pc) {
    @return $px / 96 * 72 / 12+pc;
  }
}


//
//---------------------------------------------------
//	rem, with px fallback for < IE9
//---------------------------------------------------
//

@mixin remfb($property, $sizes) {
  $rems: ();
  $pxs: ();
  
  @for $i from 1 through length($sizes) {
    $size: parseInt(nth($sizes, $i));
    $unit: unit(nth($sizes, $i));
    
    @if($unit == 'rem') {
      $pxs: join($pxs, #{$size*parseInt($main-font-size)}px);
      $rems: join($rems, #{$size}rem);
      #{$property}: $pxs;
      #{$property}: $rems;
    }
    @else {
      @if($unit != 'px') {
        @warn "Assuming #{$property} to be in pixels";
      }
      $pxs: join($pxs, #{$size}px);
      $rems: join($rems, #{$size/parseInt($main-font-size)}rem);
      #{$property}: $pxs;
      #{$property}: $rems;
    }
  }
}


//
//---------------------------------------------------
//  Media queries
//---------------------------------------------------
//

@mixin bp($min, $max: NULL) {
  @if unit($min) != 'em' {
    $min: convertUnit($min, pt);
  }
  @if($max != NULL) {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  }
  @else {
    @media (min-width: $min) {
      @content;
    }
  }
}
